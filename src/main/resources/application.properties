quarkus.devservices.enabled=false

quarkus.http.cors=true
quarkus.http.cors.origins=http://localhost:3000,localhost:8080
quarkus.http.cors.headers=accept, authorization,content-type
quarkus.http.cors.methods=GET,OPTIONS

# quarkus.datasource.devservices.enabled = true

# configure your datasource
quarkus.datasource.db-kind = postgresql
quarkus.datasource.username = aly
quarkus.datasource.password = aly
quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/hathor

# drop and create the database at startup (use `update` to only update the schema)
quarkus.hibernate-orm.database.generation = update
# quarkus.hibernate-orm.database.generation = drop-and-create

# quarkus.hibernate-orm.log.sql=true
quarkus.hibernate-orm.scripts.generation=create
quarkus.hibernate-orm.scripts.generation.create-target=ddl.sql
quarkus.banner.enabled=true

smallrye.jwt.verify.key.location=jwks.json
mp.jwt.verify.issuer=https://cognito-idp.us-west-2.amazonaws.com/us-west-2_h8atoRNOJ
smallrye.jwt.verify.key.algorithm=RS256
quarkus.native.resources.includes=jwks.json
smallrye.jwt.path.groups=cognito:groups
smallrye.jwt.claims.groups=none
# quarkus.http.auth.proactive=false 

# quarkus.log.category."io.quarkus.smallrye.jwt.runtime.auth.MpJwtValidator".level=TRACE
# quarkus.log.category."io.quarkus.smallrye.jwt.runtime.auth.MpJwtValidator".min-level=TRACE

# quarkus.http.auth.policy.role-policy1.roles-allowed=user,admin, registered                     
# quarkus.http.auth.permission.roles1.paths=/accounts/*
# quarkus.http.auth.permission.roles1.policy=role-policy1


# quarkus.http.auth.permission.permit1.paths=/hello/*                                
# quarkus.http.auth.permission.permit1.policy=permit
# quarkus.http.auth.permission.permit1.methods=GET
